// Generated by CoffeeScript 1.12.7
(function() {
  var BaseConfig, defaults, isArray;

  defaults = require('lodash/defaults');

  isArray = require('lodash/isArray');

  module.exports = BaseConfig = (function() {
    function BaseConfig(options) {
      var BundleAnalyzerPlugin, bundleAnalyzer, key, ref, ref1, val;
      this.options = options != null ? options : {};
      defaults(this.options, {
        noParse: void 0,
        unsafeCache: true,
        dirname: process.cwd(),
        moduleMode: false,
        devtool: 'source-map',
        preLoaders: []
      });
      this.config = {};
      if (this.options.moduleConfigs != null) {
        ref = this.options.moduleConfigs;
        for (key in ref) {
          val = ref[key];
          this.config[key] = val;
        }
      }
      this.config.module = {
        loaders: [
          {
            test: /\.jade$/,
            loaders: [__dirname + ("/../loaders/derby-jade-loader?" + (this.options.moduleMode ? 'module' : ''))]
          }, {
            include: /\.coffee$/,
            loaders: [__dirname + '/../loaders/derby-loader', 'coffee']
          }, {
            include: /\.js$/,
            loaders: [__dirname + '/../loaders/derby-loader']
          }, {
            include: /\.json$/,
            loader: 'json'
          }, {
            include: /\.yaml$/,
            loader: 'json!yaml'
          }
        ]
      };
      if ((this.options.loaders != null) && isArray(this.options.loaders)) {
        this.config.module.loaders = this.options.loaders.concat(this.config.module.loaders);
      }
      this.config.resolveLoader = {
        root: __dirname + '/../node_modules',
        fallback: __dirname + '/../..'
      };
      this.config.resolve = {
        extensions: ['', '.json', '.js', '.yaml', '.coffee'],
        fallback: __dirname + '/../..'
      };
      if (((ref1 = this.options.resolve) != null ? ref1.alias : void 0) != null) {
        this.config.resolve.alias = this.options.resolve.alias;
      }
      this.config.plugins = [];
      if (bundleAnalyzer = this.options.bundleAnalyzer) {
        BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
        this.config.plugins.push(new BundleAnalyzerPlugin(bundleAnalyzer));
      }
      if (this.options.preLoaders != null) {
        this.config.module.preLoaders = this.options.preLoaders;
      }
      if (this.options.postLoaders != null) {
        this.config.module.postLoaders = this.options.postLoaders;
      }
      if (this.options.noParse != null) {
        this.config.module.noParse = this.options.noParse;
      }
    }

    BaseConfig.prototype._sanitizeApps = function(apps) {
      var appName, i, len, res;
      res = {};
      if (isArray(apps)) {
        for (i = 0, len = apps.length; i < len; i++) {
          appName = apps[i];
          res[appName] = this.options.dirname + '/' + appName;
        }
      } else {
        res = apps;
      }
      return res;
    };

    BaseConfig.prototype._getHeaderEntry = function() {
      return [];
    };

    BaseConfig.prototype._getEntries = function(apps, baseEntry) {
      var appName, entry, res;
      if (baseEntry == null) {
        baseEntry = [];
      }
      baseEntry = this._getHeaderEntry().concat(baseEntry);
      res = {};
      for (appName in apps) {
        entry = apps[appName];
        if (!isArray(entry)) {
          entry = [entry];
        }
        res[appName] = baseEntry.concat(entry);
      }
      return res;
    };

    return BaseConfig;

  })();

}).call(this);
