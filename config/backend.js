// Generated by CoffeeScript 1.12.7
(function() {
  var BackendConfig, BaseConfig, _, fs, webpack,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require('fs');

  _ = require('lodash');

  webpack = require('webpack');

  BaseConfig = require('./base');

  module.exports = BackendConfig = (function(superClass) {
    extend(BackendConfig, superClass);

    function BackendConfig() {
      var ref, ref1, ref2, ref3, ref4;
      BackendConfig.__super__.constructor.apply(this, arguments);
      _.defaults(this.options, {
        backend: {}
      });
      if (!this.options.backendApps) {
        this.options.backendApps = ['server'];
      }
      this.apps = this._sanitizeApps(this.options.backendApps);
      this.config.target = 'node';
      this.config.entry = this._getEntries(this.apps, this.options.backend.baseEntry);
      if ((((ref = this.options.backend) != null ? ref.loaders : void 0) != null) && _.isArray(this.options.backend.loaders)) {
        this.config.module.loaders = this.options.backend.loaders.concat(this.config.module.loaders);
      }
      if ((((ref1 = this.options.backend) != null ? ref1.preLoaders : void 0) != null) && _.isArray(this.options.backend.preLoaders)) {
        this.config.module.preLoaders = this.options.backend.preLoaders.concat(this.config.module.preLoaders || []);
      }
      if ((((ref2 = this.options.backend) != null ? ref2.postLoaders : void 0) != null) && _.isArray(this.options.backend.postLoaders)) {
        this.config.module.postLoaders = this.options.backend.postLoaders.concat(this.config.module.postLoaders || []);
      }
      if (((ref3 = this.options.backend) != null ? (ref4 = ref3.resolve) != null ? ref4.alias : void 0 : void 0) != null) {
        this.config.resolve.alias = this.options.backend.resolve.alias;
      }
      this.config.output = {
        path: this.options.dirname + '/build',
        filename: '[name].js'
      };
      this.config.node = {
        __dirname: true,
        __filename: true
      };
      this.config.externals = this._getExternalsFn();
      this.config.recordsPath = this.options.dirname + '/build/_records';
      this.config.plugins = [
        new webpack.NormalModuleReplacementPlugin(/\.(styl|css)$/, require.resolve('node-noop')), new webpack.BannerPlugin(['try {', '  require.resolve("source-map-support");', '  require("source-map-support").install();', '} catch(e) {', '  require("derby-webpack/node_modules/source-map-support").install();', '}'].join(' '), {
          raw: true,
          entryOnly: false
        })
      ];
    }

    BackendConfig.prototype._getExternalsFn = function() {
      var includeList, nodeModules, npmScopes, ref, ref1;
      npmScopes = ((ref = this.options) != null ? ref.npmScopes : void 0) || [];
      includeList = ((ref1 = this.options) != null ? ref1.includeList : void 0) || [];
      nodeModules = fs.readdirSync(this.options.dirname + '/node_modules').filter((function(_this) {
        return function(name) {
          return name !== '.bin';
        };
      })(this)).map((function(_this) {
        return function(name) {
          if (npmScopes.indexOf(name) !== -1) {
            return fs.readdirSync(_this.options.dirname + '/node_modules/' + name).map(function(subname) {
              return name + '/' + subname;
            });
          }
          return name;
        };
      })(this));
      nodeModules = _.flatten(nodeModules);
      nodeModules = nodeModules.filter((function(_this) {
        return function(name) {
          return includeList.indexOf(name) === -1;
        };
      })(this));
      return function(context, request, cb) {
        var i, inModules, len, moduleName;
        inModules = false;
        for (i = 0, len = nodeModules.length; i < len; i++) {
          moduleName = nodeModules[i];
          if (RegExp("node_modules\\/" + moduleName + "(?:$|\\/)").test(context) || RegExp("^" + moduleName + "(?:$|\\/)").test(request)) {
            inModules = true;
            break;
          }
        }
        if (inModules) {
          return cb(null, "commonjs " + request);
        } else {
          return cb();
        }
      };
    };

    return BackendConfig;

  })(BaseConfig);

}).call(this);
